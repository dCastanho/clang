package Nodes;

import Types.IType;
import Util.CodeBlock;
import Util.Coordinates;
import Util.Environment;
import Values.IValue;
import Exceptions.InterpreterError;
import Exceptions.TypeCheckerError;

/**
 * Interface that represents a generic ASTNode
 * @author Daniel Castanho, 55078
 * @author Eric Solcan, 55562
 */
public interface ASTNode {

    /**
     * Evaluates the node, returning the value generated by it.
     * @param e an environment of values, associating ids to values
     * @return the value generated, encased in a IValue interface
     * @throws InterpreterError if there is an error, such as a mismatch type
     */
    IValue eval(Environment<IValue> e) throws InterpreterError;

    /**
     * Adds the correct sequence of JVM codes to the code block received for
     * compilation of the node.
     * @param c a codeblock to place the sequence of instructions in
     * @param e an environment of coordinates, where ids are associated to pairs (depth, slot), 
     * that represent how fair in the stack of frames we need to climb to find the value.
     */
    void compile(CodeBlock c, Environment<Coordinates> e);

    /**
     * Typechecks the node, returning its type or launching an exception if there is one.
     * @param e an environment of types, associating ids to their respective types
     * @return the node's type
     * @throws TypeCheckerError if there is an error, such as a mismatch type
     */
    IType typecheck(Environment<IType> e) throws TypeCheckerError;
	
}

