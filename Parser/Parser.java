/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package Parser;

import Nodes.*;
import Types.*;
import Values.*;
import Structures.*;

import java.util.LinkedList;
import java.util.List;

/** ID lister. */
public class Parser implements ParserConstants {

  static final public ASTNode Start() throws ParseException {ASTNode t1;
    t1 = EM();
    jj_consume_token(EL);
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode EM() throws ParseException {ASTNode t1;
ASTNode t2;
Token tok;
    t1 = E0();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEQUENTIATOR:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(SEQUENTIATOR);
      t2 = E0();
t1 = new ASTSeq(t1, t2);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode E0() throws ParseException {ASTNode t1;
ASTNode t2;
    t1 = E();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      t2 = E();
t1 = new ASTAssign(t1, t2);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode E() throws ParseException {ASTNode t1;
ASTNode t2;
Token tok;
    t1 = BM();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      tok = jj_consume_token(OR);
      t2 = BM();
t1 = new ASTBoolOps(t1, t2, tok);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode BM() throws ParseException {ASTNode t1;
  ASTNode t2;
  Token tok;
    t1 = R();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      tok = jj_consume_token(AND);
      t2 = R();
t1 = new ASTBoolOps(t1, t2, tok);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode R() throws ParseException {ASTNode t1;
  ASTNode t2;
  Token tok;
    t1 = Exp();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUALS:
    case DIFF:
    case GREATER:
    case SMALLER:
    case EQ_GREATER:
    case EQ_SMALLER:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:{
        tok = jj_consume_token(EQUALS);
        break;
        }
      case GREATER:{
        tok = jj_consume_token(GREATER);
        break;
        }
      case EQ_GREATER:{
        tok = jj_consume_token(EQ_GREATER);
        break;
        }
      case EQ_SMALLER:{
        tok = jj_consume_token(EQ_SMALLER);
        break;
        }
      case SMALLER:{
        tok = jj_consume_token(SMALLER);
        break;
        }
      case DIFF:{
        tok = jj_consume_token(DIFF);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Exp();
t1 = new ASTOverRelop(t1, t2, tok);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Exp() throws ParseException {ASTNode t1,t2;
Token tok;
    t1 = Term();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        tok = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        tok = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Exp();
if(tok.kind == PLUS)
                      t1 = new ASTOverloadedAdd(t1, t2);
                    else
                      t1 = new ASTOperator(t1,t2, tok);
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Term() throws ParseException {ASTNode t1,t2;
List<ASTNode> arguments = null;
Token tok;
    t1 = Fact();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:
      case DOT:
      case DIV:
      case LPAR:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:
      case DIV:{
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MUL:{
            tok = jj_consume_token(MUL);
            break;
            }
          case DIV:{
            tok = jj_consume_token(DIV);
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          t2 = Term();
t1 = new ASTOperator(t1,t2, tok);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MUL:
          case DIV:{
            ;
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            break label_6;
          }
        }
        break;
        }
      case LPAR:{
        jj_consume_token(LPAR);
        arguments = AL();
        jj_consume_token(RPAR);
t1 = new ASTFunApplication(t1, arguments);
        break;
        }
      case DOT:{
        jj_consume_token(DOT);
        tok = jj_consume_token(Id);
t1 = new ASTRecAccess(t1, tok.image);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public List<ASTNode> AL() throws ParseException {List<ASTNode> arguments = new LinkedList<>();
  ASTNode t1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case NEG:
    case DEF:
    case Num:
    case LBRKT:
    case MINUS:
    case LPAR:
    case NEW:
    case WHILE:
    case PRINT:
    case PRINTLN:
    case DEREF:
    case IF:
    case FUN:
    case STRING_LITERAL:
    case Id:{
      t1 = EM();
arguments.add(t1);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        t1 = EM();
arguments.add(t1);
      }
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
{if ("" != null) return arguments;}
    throw new Error("Missing return statement in function");
}

  static final public InsertionMap<String, IType> PL() throws ParseException {IType t;
  Token tok;
  InsertionMap<String, IType> args = new AccompaniedHashMap<>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Id:{
      tok = jj_consume_token(Id);
      jj_consume_token(TYPEIS);
      t = Type();
args.put(tok.image, t);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        tok = jj_consume_token(Id);
        jj_consume_token(TYPEIS);
        t = Type();
args.put(tok.image, t);
      }
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
{if ("" != null) return args;}
    throw new Error("Missing return statement in function");
}

  static final public ASTNode Fact() throws ParseException {ASTNode t1;
ASTNode t2;
ASTNode t3 = null;
int n = 0;
IType type = null;
Token tok;
InsertionMap<String, ASTNode> vars = new AccompaniedHashMap<>();
InsertionMap<String, IType> types = new AccompaniedHashMap<>();
InsertionMap<String, IType> args = new AccompaniedHashMap<>();
List<ASTNode> arguments = new LinkedList<>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case Num:{
      tok = jj_consume_token(Num);
t1 = new ASTNum(Integer.parseInt(tok.image));
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
      t1 = EM();
      jj_consume_token(RPAR);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      t1 = Fact();
t1= new ASTUneg(t1);
      break;
      }
    case Id:{
      tok = jj_consume_token(Id);
t1 = new ASTId(tok.image);
      break;
      }
    case DEF:{
      jj_consume_token(DEF);
      label_9:
      while (true) {
        tok = jj_consume_token(Id);
        jj_consume_token(TYPEIS);
        type = Type();
        jj_consume_token(EQ);
        t1 = EM();
vars.put(tok.image, t1);
            types.put(tok.image, type);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Id:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_9;
        }
      }
      jj_consume_token(IN);
      t1 = EM();
      jj_consume_token(END);
t1 = new ASTDef(vars, t1, types);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
t1 = new ASTBool(false);
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
t1 = new ASTBool(true);
      break;
      }
    case NEG:{
      jj_consume_token(NEG);
      t1 = Fact();
t1 = new ASTNeg(t1);
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      t1 = EM();
t1 = new ASTRef(t1);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      t1 = EM();
      jj_consume_token(DO);
      t2 = EM();
      jj_consume_token(END);
t1= new ASTWhile(t1, t2);
      break;
      }
    case DEREF:{
      jj_consume_token(DEREF);
      t1 = Fact();
t1= new ASTDeref(t1);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      t1 = EM();
      jj_consume_token(THEN);
      t2 = EM();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        t3 = EM();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(END);
t1= new ASTIf(t1, t2, t3);
      break;
      }
    case PRINT:{
      jj_consume_token(PRINT);
      t1 = E();
t1= new ASTPrint(t1, false);
      break;
      }
    case PRINTLN:{
      jj_consume_token(PRINTLN);
      t1 = E();
t1= new ASTPrint(t1, true);
      break;
      }
    case LBRKT:{
      jj_consume_token(LBRKT);
      tok = jj_consume_token(Id);
      jj_consume_token(EQ);
      t1 = EM();
vars.put(tok.image, t1); n++;
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        tok = jj_consume_token(Id);
        jj_consume_token(EQ);
        t1 = EM();
vars.put(tok.image, t1); n++;
      }
      jj_consume_token(RBRKT);
t1 = new ASTRec(vars, n);
      break;
      }
    case FUN:{
      jj_consume_token(FUN);
      args = PL();
      jj_consume_token(ARROW);
      t1 = EM();
t1 = new ASTFun(args, t1);
      jj_consume_token(END);
      break;
      }
    case STRING_LITERAL:{
      tok = jj_consume_token(STRING_LITERAL);
t1 = new ASTString(  tok.image.substring(1, tok.image.length()-1));
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t1;}
    throw new Error("Missing return statement in function");
}

  static final public IType Type() throws ParseException {IType t = null;
Token tokType = null;
Token id = null;
InsertionMap<String, IType> recTypes = new AccompaniedHashMap<>();
List<IType> args = new LinkedList<>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOL:{
      tokType = jj_consume_token(BOOL);
      break;
      }
    case INT:{
      tokType = jj_consume_token(INT);
      break;
      }
    case REF:{
      tokType = jj_consume_token(REF);
      t = Type();
      break;
      }
    case STRING:{
      tokType = jj_consume_token(STRING);
      break;
      }
    case REC:{
      tokType = jj_consume_token(REC);
      jj_consume_token(LBRKT);
      id = jj_consume_token(Id);
      jj_consume_token(TYPEIS);
      t = Type();
recTypes.put(id.image, t);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        id = jj_consume_token(Id);
        jj_consume_token(TYPEIS);
        t = Type();
recTypes.put(id.image, t);
      }
      jj_consume_token(RBRKT);
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REC:
      case LPAR:
      case STRING:
      case INT:
      case BOOL:
      case REF:{
        t = Type();
args.add( t );
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[21] = jj_gen;
            break label_12;
          }
          jj_consume_token(COMMA);
          t = Type();
args.add( t );
        }
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      t = Type();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
IType type = null;
    if(tokType == null)
      type = new TypeFunction(args, t);
    else if( tokType.kind == BOOL)
      type = TypeBool.BOOL_TYPE;
    else if( tokType.kind == INT)
      type = TypeInt.INT_TYPE;
    else if(tokType.kind == REF)
      type = new TypeRef( t );
    else if(tokType.kind == STRING)
      type = TypeString.STRING_TYPE;
    else if(tokType.kind == REC)
      type = new TypeRecord(recTypes);


    {if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x100,0x200,0x1ec00,0x1ec00,0x6000000,0x6000000,0x78000000,0x28000000,0x28000000,0x78000000,0x0,0x44c210c0,0x0,0x0,0x0,0x0,0x0,0x44c210c0,0x0,0x0,0x40080000,0x40080000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x200,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x640da2,0x100000,0x400000,0x400000,0x2000,0x100000,0x640da2,0x100000,0x100000,0x1c008,0x1c008,};
	}

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[55];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 24; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 55; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

                     }
