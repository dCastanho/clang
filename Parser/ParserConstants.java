/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package Parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int TRUE = 6;
  /** RegularExpression Id. */
  int FALSE = 7;
  /** RegularExpression Id. */
  int OR = 8;
  /** RegularExpression Id. */
  int AND = 9;
  /** RegularExpression Id. */
  int EQUALS = 10;
  /** RegularExpression Id. */
  int DIFF = 11;
  /** RegularExpression Id. */
  int NEG = 12;
  /** RegularExpression Id. */
  int GREATER = 13;
  /** RegularExpression Id. */
  int SMALLER = 14;
  /** RegularExpression Id. */
  int EQ_GREATER = 15;
  /** RegularExpression Id. */
  int EQ_SMALLER = 16;
  /** RegularExpression Id. */
  int DEF = 17;
  /** RegularExpression Id. */
  int EQ = 18;
  /** RegularExpression Id. */
  int REC = 19;
  /** RegularExpression Id. */
  int IN = 20;
  /** RegularExpression Id. */
  int END = 21;
  /** RegularExpression Id. */
  int Num = 22;
  /** RegularExpression Id. */
  int LBRKT = 23;
  /** RegularExpression Id. */
  int RBRKT = 24;
  /** RegularExpression Id. */
  int PLUS = 25;
  /** RegularExpression Id. */
  int MINUS = 26;
  /** RegularExpression Id. */
  int MUL = 27;
  /** RegularExpression Id. */
  int DOT = 28;
  /** RegularExpression Id. */
  int DIV = 29;
  /** RegularExpression Id. */
  int LPAR = 30;
  /** RegularExpression Id. */
  int RPAR = 31;
  /** RegularExpression Id. */
  int EL = 32;
  /** RegularExpression Id. */
  int NEW = 33;
  /** RegularExpression Id. */
  int QUOTE = 34;
  /** RegularExpression Id. */
  int STRING = 35;
  /** RegularExpression Id. */
  int ASSIGN = 36;
  /** RegularExpression Id. */
  int WHILE = 37;
  /** RegularExpression Id. */
  int DO = 38;
  /** RegularExpression Id. */
  int PRINT = 39;
  /** RegularExpression Id. */
  int PRINTLN = 40;
  /** RegularExpression Id. */
  int SEQUENTIATOR = 41;
  /** RegularExpression Id. */
  int DEREF = 42;
  /** RegularExpression Id. */
  int IF = 43;
  /** RegularExpression Id. */
  int THEN = 44;
  /** RegularExpression Id. */
  int ELSE = 45;
  /** RegularExpression Id. */
  int INT = 46;
  /** RegularExpression Id. */
  int BOOL = 47;
  /** RegularExpression Id. */
  int REF = 48;
  /** RegularExpression Id. */
  int TYPEIS = 49;
  /** RegularExpression Id. */
  int FUN = 50;
  /** RegularExpression Id. */
  int ARROW = 51;
  /** RegularExpression Id. */
  int COMMA = 52;
  /** RegularExpression Id. */
  int STRING_LITERAL = 53;
  /** RegularExpression Id. */
  int Id = 54;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 5>",
    "\"true\"",
    "\"false\"",
    "\"||\"",
    "\"&&\"",
    "\"==\"",
    "\"!=\"",
    "\"~\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"def\"",
    "\"=\"",
    "\"rec\"",
    "\"in\"",
    "\"end\"",
    "<Num>",
    "\"[\"",
    "\"]\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\".\"",
    "\"/\"",
    "\"(\"",
    "\")\"",
    "\";;\"",
    "\"new\"",
    "\"\\\"\"",
    "\"string\"",
    "\":=\"",
    "\"while\"",
    "\"do\"",
    "\"print\"",
    "\"println\"",
    "\";\"",
    "\"!\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"int\"",
    "\"boolean\"",
    "\"ref\"",
    "\":\"",
    "\"fun\"",
    "\"->\"",
    "\",\"",
    "<STRING_LITERAL>",
    "<Id>",
  };

}
